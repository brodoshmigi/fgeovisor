 ______________________________________________________________________________________
|09.02.2025 | |                                                                        |
|```````````|||                                                                        |   
|___________|_|________________________________________________________________________|
|Сейчас нет каких-то примитивов и модуль построен как фасад (для поиска снимков у НАСА)|
|                                                                                      |
|Под примитивами, имеется ввиду базовые классы, которые будут хранить и давать доступ  |
|к необходимым данным.                                                                 |
|___________|||________________________________________________________________________|

Если делать рефакторинг, то только к структуре Client и AsyncClient. Или расширять классы
уже существующие. Например, Collection и Assets разделены по причине разных функциональных
возможностей, + внутри один асинхронный другой синхронный. Поэтому классы либо расширяются 
получая новую функциональность от pystac_client под нашу логику, либо перестраиваются под 
Client и AsyncClient. Это необходимо, так как полностью библиотеку pystac_client(а тем более 
pystac) мы не покрыли фасадом - используем только необходимое.

Также можно расмотреть возможность переписать pystac_client самостоятельно, что, вероятно,
займет какое-то время(много). Сама спецификация stac простая, но не везде это работает, 
как хочется.

Сейчас структура выглдядит так:
 ________________________________________________________________________________
| Interface - главный модуль                                                     |
|                                                                                |
|   -> ISearch - главный интерфейс                                               |
|                                                                                |
|        -> SearchEngine(sync/async)                                             |
|         ^ :assets - файл с кодом                                               |
|                                                                                |
|        -> ICollection(sync/async)                                              |
|         ^ :collection - файл с кодом                                           |
|                                                                                |
|        -> IDownload(sync/async)                                                |
|         ^ :loader - файл с кодом                                               |
|                                                                                |
|             -> abstract - абстракции к классам                                 |
|             -> utils - вспомогательные код                                     |
|             -> decorators - декораторы(тоже utils)                             |
|                                                                                |
|        -> auth - главный файл с авторизацией(пока только NASA)                 |
|        -> cloud(Terabox) - подключить облако можно любое(сейчас у нас terabox) |
|                                                                                |
|    -> Django ORM - объединение всех данных в одном месте                       |
|________________________________________________________________________________|

После рефакторинга в структуру Client и AsyncClient, она может выглядеть так(без примитивов):
 ________________________________________________________________________________
| Interface - главный модуль                                                     |
|       -> Client - файл с кодом и синхронный интерфейс                          |
|                                                                                |
|       -> AsyncClient - файл с кодом и асинхронный интерфейс                    |
|                                                                                |
|          -> abstract                                                           |
|          -> utils                                                              |
|          -> decorators                                                         |
|                                                                                |
|       -> auth                                                                  |
|       -> cloud                                                                 | 
|                                                                                |
|     -> Django ORM                                                              |
|________________________________________________________________________________|